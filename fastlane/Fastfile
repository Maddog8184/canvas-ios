# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  lane :test_old do
    run_tests(workspace: "Canvas.xcworkspace", devices: ["iPhone 8"], scheme: "StudentUITests")
  end

  RESULT = File.absolute_path('./results')
  OUTPUT = File.absolute_path('./output')

  lane :test do
    test_run_block = lambda do |testrun_info|
      failed_test_count = testrun_info[:failed].size
      try_attempt = testrun_info[:try_count]
      UI.important("failed_test_count: #{failed_test_count}  tryAttempt: #{try_attempt}")

      if failed_test_count > 0
        UI.important('The run of tests would finish with failures due to fragile tests here.')

        if try_attempt < 3
          UI.header('Since we are using :multi_scan, we can re-run just those failing tests!')
        end
      end
    end

    result = multi_scan(
      workspace: 'Canvas.xcworkspace',
      devices: ["iPhone 8"],
      try_count: 3,
      fail_build: false,
      scheme: 'StudentUITests',
      testrun_completed_block: test_run_block,
      parallel_testrun_count: 4,
      skip_slack: true,
      batch_count: 8,
      result_bundle: RESULT,
      output_directory: OUTPUT,
      output_types: "html,junit",
      # skip_build: true,
    )
    unless result[:failed_testcount].zero?
      UI.message("There are #{result[:failed_testcount]} legitimate failing tests")
    end
  end
end
